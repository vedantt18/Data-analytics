# -*- coding: utf-8 -*-
"""OEL_2103_PROJ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ipstpzLjjuJjU61yYweNo4xlbmb_1RY2
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import numpy as np

# Load the dataset
file_path = "world_population.csv"
df = pd.read_csv(file_path)

# Display the first few rows and column info
df_head = df.head()
df_info = df.info()

df_head

# Set the style
sns.set(style="whitegrid")

# Step 2: Diagrammatic and Graphical Representation

# Bar plot: Population by Continent
plt.figure(figsize=(10, 6))
sns.barplot(data=df, x='Continent', y='2022 Population', estimator=sum, ci=None)
plt.title('Total 2022 Population by Continent')
plt.ylabel('Total Population')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Histogram: Distribution of Population Density
plt.figure(figsize=(10, 6))
sns.histplot(df['Density (per km²)'], bins=30, kde=True)
plt.title('Distribution of Population Density (per km²)')
plt.xlabel('Density (per km²)')
plt.tight_layout()
plt.show()

# Scatter plot: Area vs Population
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Area (km²)', y='2022 Population', hue='Continent')
plt.title('Area vs 2022 Population')
plt.xlabel('Area (km²)')
plt.ylabel('2022 Population')
plt.tight_layout()
plt.show()

# Box plot: Population Density by Continent
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Continent', y='Density (per km²)')
plt.title('Population Density by Continent')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

from scipy import stats
import numpy as np

# Selecting numerical columns for analysis
num_cols = ['2022 Population', 'Area (km²)', 'Density (per km²)',
            'Growth Rate', 'World Population Percentage']

# Recalculate descriptive statistics with manual MAD (Mean Absolute Deviation)
summary_stats_fixed = {}

for col in num_cols:
    data = df[col]
    summary_stats_fixed[col] = {
        "Mean": data.mean(),
        "Median": data.median(),
        "Mode": data.mode().iloc[0] if not data.mode().empty else np.nan,
        "Range": data.max() - data.min(),
        "Q1": data.quantile(0.25),
        "Q3": data.quantile(0.75),
        "Variance": data.var(),
        "Standard Deviation": data.std(),
        "Standard Error": stats.sem(data),
        "Mean Deviation": np.mean(np.abs(data - data.mean())),  # Fixed here
        "Coefficient of Variation": data.std() / data.mean() if data.mean() != 0 else np.nan,
        "10th Percentile": data.quantile(0.10),
        "90th Percentile": data.quantile(0.90),
        "Skewness": data.skew(),
        "Kurtosis": data.kurt()
    }

# Convert to DataFrame
summary_df_fixed = pd.DataFrame(summary_stats_fixed).T.round(3)
summary_df_fixed

import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import numpy as np

# Select the column
data = df['Density (per km²)'].dropna()

# Histogram + normal curve
sns.histplot(data, kde=True, stat="density", bins=30, color='skyblue')
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = stats.norm.pdf(x, data.mean(), data.std())
plt.plot(x, p, 'r', linewidth=2)
plt.title("Density (per km²) - Histogram with Normal Curve")
plt.show()

# Q-Q Plot
stats.probplot(data, dist="norm", plot=plt)
plt.title("Q-Q Plot for Density (per km²)")
plt.show()

# Shapiro-Wilk Test
shapiro_stat, shapiro_p = stats.shapiro(data)
print(f"Shapiro-Wilk Test: Statistic = {shapiro_stat:.4f}, p-value = {shapiro_p:.4f}")

# Kolmogorov–Smirnov Test
ks_stat, ks_p = stats.kstest(data, 'norm', args=(data.mean(), data.std()))
print(f"Kolmogorov–Smirnov Test: Statistic = {ks_stat:.4f}, p-value = {ks_p:.4f}")

# Event A: Country is in Asia
asia_df = df[df['Continent'] == 'Asia']
P_A = len(asia_df) / len(df)

# Event B: High density (>500)
high_density_df = df[df['Density (per km²)'] > 500]
P_B = len(high_density_df) / len(df)

# P(B|A): High density among Asian countries
P_B_given_A = len(asia_df[asia_df['Density (per km²)'] > 500]) / len(asia_df)

# Bayes' Theorem: P(A|B)
P_A_given_B = (P_B_given_A * P_A) / P_B
print(f"Probability(country is in Asia | high density) = {P_A_given_B:.4f}")

from statsmodels.stats.weightstats import ztest

z_stat, z_p = ztest(df['2022 Population'].dropna(), value=50000000)
print(f"Z-test: z = {z_stat:.4f}, p = {z_p:.4f}")

